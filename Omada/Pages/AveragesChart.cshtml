@page
@model Omada.Pages.AveragesChartModel
@{
    ViewData["Title"] = "AveragesGraph";
}

<div class="container">
    <canvas id="chart">
    </canvas>
</div>

@section Scripts
{
<script>
    Date.prototype.getWeekNumber = function(){
        var d = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate() + 1));
        var dayNum = d.getUTCDay() || 7;
        d.setUTCDate(d.getUTCDate() + 4 - dayNum);
        var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
        return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
    };        
    var today = new Date();
    var weeks = [];
    for (var i = 1; i <= today.getWeekNumber(); i++) {
        weeks.push(i);
    }
    var colorIncreaser = 5;
    //var colors = function() {
    //    var r = 'green';
    //    var g = colorIncreaser + 110;
    //    var b = colorIncreaser + 45;
    //    colorIncreaser += 120;
    //    return "rgb(" + r + "," + g + "," + b + ")";
    //};

    function colors() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

    var omadaChart = document.getElementById("chart").getContext("2d");
    var myDatasets = [];

    var dictionary = @Html.Raw(Json.Serialize(Model.AverageWeeks));
    for (var key in dictionary) {
        if (dictionary.hasOwnProperty(key)) {
            var averages = dictionary[key].map(function(v){
                return {
                    x: v.week,
                    y: v.average
                };
            });
            var current = {
                fill: false,
                borderColor: colors,
                label: key,
                data: averages
            };
            myDatasets.push(current);
        }
    }

    var massPopChart = new Chart(omadaChart, {
        type: 'line',
        data: {
            labels: weeks,
            datasets: myDatasets
        },
        options: {}
    });
</script>
}